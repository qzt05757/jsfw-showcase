JavaScript のフレームワークが大量にあって違いが分かりにくいので、
同じアプリケーションを各フレームワーク上に実装して、違いを浮彫にしたい。

あまりにもシンプルなアプリケーションだとつまらないので、以下の機能をもつアプリケーションとする
- サーバの REST API を呼び出す
- bootstarp で HTML を作る

ただし、途中で飽きる可能性高し

- http://ctg-dev.swe.nec.co.jp/gitbucket/hayakawa/jsfw-showcase

動かす場合、
gradle インストール後、gradle jettyRun でサーバが起動するので、
ブラウザで http://localhost:8080/jsfw-showcase/ を表示する

eclipse にインポートして Tomcat に deploy しても 可

* jquery.js

普通に書くとビューの中にモデルの値が混在する形となってしまう。
もちろん、綺麗に書くこともできる

* backbone.js

jquery とは異なり、ビューとモデルは分離。ビューは HTML、モデルは JavaScript で記述
ビューからモデル、モデルからビューの値の同期は自分でコーディングする必要あり

基本的に、変更時にイベント発火する機能をもつモデル定義に特化している印象。ルーティングクラスもあるようだが未調査

結構コードが冗長になる感じ。

- モデルの属性取得時に get が必要になるのが面倒。
- Extend 側に書くのか インスタンス側に書くのか結構混乱する
- View クラスの el 定義がタイミングによってうまく渡せない。とりあえず、インスタンス時に渡す場合、id 指定だとうまくいかず、el 指定が必要っぽい。

* knockout.js

ビューとモデルは分離。ビューは HTML、モデルは JavaScript で記述
ビュー側に対応するモデルを記述すれば、ビューとモデルの値の同期は FW が行う。
モデル定義に Knockout が依存する (ko.observable とか)が美しくないと思う

* ember.js

イメージでは knockout.js に近い

* angular.js(1.x)

フルスタックのフレームワーク
他のフレームワークが Model と View の分離が主眼であるのに対して、REST の呼び出し等
クライアントアプリ全般をカバーしたフレームワーク

* react.js

ビューとモデルのどちらも JavaScript で記述する。(ビューは JSX という HTML 風のシンタクスを利用)
コンポーネント単位にビューとモデルがまとまる形のため、部品化しやすい(かもしれない)

ただし、HTML ベースではないため、デザイナが HTML を作成して、そのあとでプログラマが
ロジックを埋め込む、という開発スタイルとは整合しづらいかもしれない

* reactive.js

ビューとモデルは分離。ビューは HTML、モデルは JavaScript で記述。

HTML をコンポーネント単位で記述するため、react.js と同様にデザイナ作の HTML をベースに
ロジックを追加する開発とは相性が悪いかもしれない

* vue.js

しらない

* aurela.js

しらない。

* 参考
- http://paiza.hatenablog.com/entry/2015/03/11/Backbone_JS%E3%81%8B%E3%82%89Angular2%E3%81%BE%E3%81%A7%E3%80%81%E5%85%A89%E5%A4%A7JavaScript%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%92%E6%9B%B8%E3%81%8D%E6%AF%94%E3%81%B9